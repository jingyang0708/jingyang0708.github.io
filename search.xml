<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue冲冲冲！！！</title>
      <link href="/2022/12/19/vue/"/>
      <url>/2022/12/19/vue/</url>
      
        <content type="html"><![CDATA[<h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><pre><code>├── node_modules ├── public│   ├── favicon.ico: 页签图标│   └── index.html: 主页面├── src│   ├── assets: 存放静态资源│   │   └── logo.png│   │── component: 存放组件│   │   └── HelloWorld.vue│   │── App.vue: 汇总所有组件│   │── main.js: 入口文件├── .gitignore: git版本管制忽略的配置├── babel.config.js: babel的配置文件├── package.json: 应用包配置文件 ├── README.md: 应用描述文件├── package-lock.json：包版本控制文件</code></pre><h2 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h2><blockquote><p>1、vue.js和vue.runtime.xxx.js的区别：<br>     （1）、vue.js时完整版的Vue，包含：核心模块和模板解析器<br>     （2）、vue.runtime.xxx.js时运行版Vue，只包含：核心功能，没有模板解析器</p><p>2、因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用render函数接收到的createElement函数去指定具体内容</p></blockquote><h2 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h2><blockquote><p>使用vue inspect &gt; output.js可以查看Vue脚手架的默认配置<br>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh/config/">https://cli.vuejs.org/zh/config/</a>    </p></blockquote><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><blockquote><p>1、被用来给元素或子组件注册引用信息<br>2、应用在html标签上获取的是真实的DOM元素，应用在子组件标签上获取的是组件实例对象 vc<br>3、使用方式</p><blockquote><ul><li>打标识:<br> <code>&lt;h1 v-text=&quot;msg&quot; ref=&quot;title&quot;&gt;xxx&lt;/h1&gt;</code><br>   <code>&lt;School ref=&quot;sch&quot; /&gt;</code></li><li>获取：<blockquote><ul><li>console.log(this.$refs.title);  真实的DOM元素 </li><li>console.log(this.$refs.sch);  School组件的实例对象 vc</li></ul></blockquote></li></ul></blockquote></blockquote><h2 id="配置项props"><a href="#配置项props" class="headerlink" title="配置项props"></a>配置项props</h2><pre><code>功能:让组件接受外部传过来的数据 （1）、传递数据：     &lt;Student uname=&quot;羊仔&quot; sex=&quot;男&quot; :age=&quot;18&quot;&gt;&lt;/Student&gt; （2）、接收数据    第一种方式（只接收）：      props: [&quot;uname&quot;, &quot;sex&quot;, &quot;age&quot;],     第二种方式（限制类型）：          props: &#123;           uname: String,           sex: String,           age: Number,           &#125;,      第三种方式（限制类型、限制必要性、指定默认值）            props: &#123;              uname: &#123;                type: String, //uname的类型是字符串                required: true, //uname是必要的              &#125;,              sex: &#123;                type: String, //sex的类型是字符串                required: true, //sex是必要的              &#125;,              age: &#123;                type: Number, //age的类型是数字型                required: true, //age是必要的                default: 20, //默认值              &#125;,            &#125;,   </code></pre><blockquote><ul><li>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了<br>修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</li></ul></blockquote><h2 id="mixin-混合-x2F-混入"><a href="#mixin-混合-x2F-混入" class="headerlink" title="mixin(混合&#x2F;混入)"></a>mixin(混合&#x2F;混入)</h2><pre><code>功能:可以把多个组件共用的配置提取成一个混入对象# 本地图片</code></pre>  <img src="./src/assets/mixin.png" alt="示例图片" style="zoom:50%;" /><pre><code>使用方式:  第一步：定义混合 （在main.ja的同级目录下，创建一个mixin.js文件）</code></pre> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">//将混合暴露出模块</span></span><br><span class="line">      <span class="keyword">export</span> <span class="keyword">const</span> mixin = &#123;</span><br><span class="line">          <span class="attr">methods</span>: &#123;</span><br><span class="line">              <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">                  <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">uname</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">      &#125;</span><br><span class="line"><span class="string">``</span><span class="string">`     </span></span><br><span class="line"><span class="string">      第二步：使用混合：</span></span><br><span class="line"><span class="string">       （1）、全局引入（写在main.js中）</span></span><br><span class="line"><span class="string">            import &#123; mixin &#125; from &#x27;./mixin&#x27;</span></span><br><span class="line"><span class="string">            Vue.mixin(mixin)</span></span><br><span class="line"><span class="string">       （2）、局部引入</span></span><br><span class="line"><span class="string">           import &#123; mixin &#125; from &quot;../mixin&quot;;</span></span><br><span class="line"><span class="string">           mixins: [mixin],</span></span><br><span class="line"><span class="string"> + 注意：</span></span><br><span class="line"><span class="string"> &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=MistyRose&gt;</span></span><br><span class="line"><span class="string">全局引入 &lt;font color=red&gt;写在main.js中&lt;/font&gt;</span></span><br><span class="line"><span class="string">局部引入 &lt;font color=red&gt;写在要引入的组件中&lt;/font&gt;</span></span><br><span class="line"><span class="string">&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 插件</span></span><br><span class="line"><span class="string"> &gt;     功能：用于增强Vue</span></span><br><span class="line"><span class="string">&gt;     本质：包含install方法的一个对象，install的第一个参数是Vue，第二个参数是插件使用者传递的数据。</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">    定义插件：</span><br><span class="line">     install = <span class="keyword">function</span>(<span class="params">Vue,options</span>)&#123;</span><br><span class="line">        <span class="comment">//全局过滤器必须在new Vue实例之前就写好</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&quot;mySlice&quot;</span>, <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">4</span>) <span class="comment">//从索引号开始，截取4位</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="comment">//全局指令 </span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;fBind&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// 指令与元素成功绑定的时候会被调用</span></span><br><span class="line">        <span class="title function_">bind</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">            element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bind&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//指令所在元素被插入页面的时候调用</span></span><br><span class="line">        <span class="title function_">inserted</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">            element.<span class="title function_">focus</span>()</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inserted&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 当指令所在的模板被重新解析时就会被调用</span></span><br><span class="line">        <span class="title function_">update</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">            element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;update&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//全局混入</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">       <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line">               <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">               <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//给Vue原型上添加一个方法（vm和vc上面都可以用了）  Vue原型上面的属性和方法 vm 和 vc 都可以用 </span></span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="function">() =&gt;</span> &#123; <span class="title function_">alert</span>(<span class="string">&quot;bkpp是真的！！！&quot;</span>) &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h2 id="scoped-样式"><a href="#scoped-样式" class="headerlink" title="scoped 样式"></a>scoped 样式</h2><blockquote><p>   功能：让样式在局部生效<br>   写法：<code>&lt;style scoped&gt;</code></p></blockquote><h2 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h2><p>  1、 组件化编码流程:</p><pre><code> (1)、 拆分静态组件:组件要按照功能点拆分.命名不要与html元素冲突 (2)、实现动态组件:考虑好数据的存放位置,数据是一个组件在用,还是一些组件     在用    1)、 一个组件在用:放在组件自身    2)、 一些组件在用:放在他们共同的父组件上面(状态提升) (3)、 实现交互:从绑定事件开始</code></pre><p>  2 props适用于</p><pre><code>   (1)、 父组件===&gt;子组件 通信 (属性)   (2)、 子组件 ===&gt; 父组件  通信 (方法, 要求父组件事先准备一个函数,传给子组件,子组件在适当的时机调用)</code></pre><p>  3、 使用v-model时要切记,v-model绑定的值不能时props传过来的值,因为props时不可修改的<br>  4、 props传过来的若是对象类型的值,修改对象中的属性时vue监测不到,不会报错,但是不推荐这样做  </p><h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><p>  1、存储内容的大小一般支持5MB左右（不同浏览器可能还不一样）<br>  2、浏览器能通过Window.sessionStorage和Window.localStorage属性来实现本地存储机制<br>  3、相关API:</p><pre><code>(1)、xxxStorage.setItem(&#39;key&#39;,&#39;value&#39;)      该方法接受一个键和值作为参数，会把键值对添加加到存储中，如果键名存在，则更新对应的值（2）、xxxStorage.getItem(&#39;person&#39;)           该方法接受一个键名作为参数，返回键名对应的值（3）、xxxxStorage.removeItem(&#39;key&#39;)         该方法接受一个键名作为参数，并把该键名从存储中删除（4）、xxxxStorage.clear()        该方法会清除存储中的所有数据</code></pre><p>  4、备注：</p><pre><code> 1、sessionStorage存储的内容会随浏览器窗口的关闭而消失 2、localStroage存储的内容，需要手动清除才会消失 3、xxxStorage.getItem(&#39;key&#39;)如果key对应的value找不到，那么getItem返回的就是null 4、JSON.parse(null) 返回的结果仍为null</code></pre><h2 id="组建的自定义事件"><a href="#组建的自定义事件" class="headerlink" title="组建的自定义事件"></a>组建的自定义事件</h2><p>   1、一种组件间通信的方式：子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件<br>   2、使用场景：子组件想给父组件传数据，那么就要在父组件中给子组件绑定自定义事件（事件的回调在父组件中）<br>  3、绑定自定义事件<br>     （1）、第一种方式 ： 在父组件中<br>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">v-on:jing</span>=<span class="string">&quot;getStudentName&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span>  或  <span class="tag">&lt;<span class="name">Student</span> @<span class="attr">jing</span>=<span class="string">&quot;getStudentName&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br></pre></td></tr></table></figure><br>  （2）、第二种方式： 在父组件中<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;<span class="title class_">Student</span> ref=<span class="string">&quot;student&quot;</span> &gt;&lt;/<span class="title class_">Student</span>&gt;</span><br><span class="line"> ....</span><br><span class="line"> <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$on(<span class="string">&quot;jing&quot;</span>, <span class="variable language_">this</span>.<span class="property">getStudentName</span>); <span class="comment">//绑定自定义事件</span></span><br><span class="line"> &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>  （3）、若想让自定义事件只触发一次，可以使用once修饰符 或  $once()方法</p><p>   4、触发自定义事件：</p><pre><code>this.$emit(&quot;jing&quot;, this.uname, 1, 2, 3, 4);</code></pre><p>  5、解绑自定义事件：</p><pre><code> this.$off(&quot;jing&quot;); //解绑一个自定义事件 this.$off([&quot;jing&quot;, &quot;demo&quot;]); //解绑多个自定义事件 this.$off(); //解绑所有的自定义事件</code></pre><p>  6、组件上也可以绑定原生DOM事件，不过需要native修饰符<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">ref</span>=<span class="string">&quot;student&quot;</span> @<span class="attr">click.native</span>=<span class="string">&quot;show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br></pre></td></tr></table></figure><br>   7、注意：</p><pre><code>通过 this.$refs.student.$on(&quot;jing&quot;,回调); 绑定的自定义事件，回调要么配置在methods中，要么使用箭头函数</code></pre><h2 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h2><p>  1、一种组件间的通信方式：适用于任意组件间通信<br>  2、安装全局事件总线</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">   <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">   <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//生命周期里面的this是vue实例</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>   3、使用事件总线<br>    （1）、接收数据：A组件先后接受数据，则在A组件中给$bus绑定自定义事件， <strong style="color:#DD5145">事件的回调留在A中</strong><br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&quot;hello&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">//绑定hello这个自定义事件</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是School组件，我收到了数据&quot;</span>, data);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    ....</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>    (2)、提供数据  </p><pre><code>   this.$bus.$emit(&quot;hello&quot;, this.uname);</code></pre><p> 4、最好在 beforeDestroy钩子中，用<strong style="color:#DD5145">$off解绑当前组件用到的自定义事件 </strong>     </p><pre><code> this.$bus.$off(&quot;hello&quot;);</code></pre><h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><p> 1、一种组件间通信的方式，适用于任意组件间通信<br> 2、使用步骤<br>   （1）、安装pubsub: npm i pubsub-js<br>   （2）、引入 import pubsub from “pubsub-js”;<br>    （3）、接受数据：A组件想接受数据，则在A组件中订阅消息，订阅消息的回调留在A组件自身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//订阅消息（需要数据的订阅消息，重要的是消息的内容）  （提供数据的发布消息，重要的是消息名）</span></span><br><span class="line">    <span class="comment">//这里有两个参数，magName是消息名，data是收到的数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pubId</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&quot;hello&quot;</span>, <span class="function">(<span class="params">magName, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;有人发布了hello消息，hello消息的回调执行了&quot;</span>, data);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4、提供数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    pubsub.publish(&quot;hello&quot;, 9999);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5、最好在beforeDestroy钩子中，取消订阅 ， &lt;strong style=&quot;color:#DD5145&quot;&gt;通过id进行取消订阅操作 &lt;/strong&gt;  </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">    <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//每一次订阅，消息的id都是不同的值，需要通过id取消订阅  </span></span><br><span class="line">    pubsub.<span class="title function_">unsubscribe</span>(<span class="variable language_">this</span>.<span class="property">pubId</span>);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><p>1、语法：this.$nextTick(回调函数)<br>2、作用：在下一次DOM更新结束后执行其指定的回调<br>3、什么时候用：当数据改变后，要基于更新后的新DOM进行某些操作，要在nextTick所指定的回调函数中执行</p><h2 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h2><p>1、作用：在插入、更新或移除DOM元素时，在合适的时候给元素添加样式类名<br>2、Enter: v-enter  v-enter-active  v-enter-to<br>    Leave:v-leave   v-leave-active  v-leave-to<br>3、写法</p><pre><code>  （1）、准备好样式    元素进入的样式 enter    v-enter  进入的起点    v-enter-active  进入的过程中    v-enter-to  进入的终点  元素离开的样式 leave    v-leave  离开的起点    v-leave-active  离开的过程    v-leave-to  离开的终点</code></pre><p>   （2）、使用 transition  标签包裹要过度的元素，并配置nane属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">:appear</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果给transition标签起名，那么下面对应的动画也要改名字   .hello-enter-active8--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>  （3）、备注<br>    若有多个元素需要过度，则需要使用  transition-group标签，并且每一个元素都有一个key值  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">transition-group</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果给transition标签起名，那么下面对应的动画也要改名字  .hello-enter-active8--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- transition标签里面只能由一个元素 ， 如果要给多个元素添加过度效果，需要用 transition-group 并且每一个元素都有一个唯一的key值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>bkpp<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><h5 id="方法一：-在vue-config-js中添加如下配置"><a href="#方法一：-在vue-config-js中添加如下配置" class="headerlink" title="方法一：  在vue.config.js中添加如下配置"></a>方法一：  在vue.config.js中添加如下配置</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">     <span class="attr">proxy</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   说明：</span><br><span class="line">   <span class="number">1</span>、优点：配置简单，请求资源时直接发送给前端（<span class="number">8080</span>）即可</span><br><span class="line">   <span class="number">2</span>、缺点：不能配置多个代理，不能灵活的控制请求是否走代理</span><br><span class="line">   <span class="number">3</span>、工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器（优先匹配前端资源）</span><br></pre></td></tr></table></figure><h5 id="方法二：-在vue-config-js中配置具体代理规则："><a href="#方法二：-在vue-config-js中配置具体代理规则：" class="headerlink" title="方法二：   在vue.config.js中配置具体代理规则："></a>方法二：   在vue.config.js中配置具体代理规则：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line"><span class="attr">proxy</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;/api&#x27;</span>: &#123;<span class="comment">//匹配所有以 &#x27;/api&#x27; 开头的请求路径</span></span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,  <span class="comment">//代理目标的基础路径</span></span><br><span class="line">    <span class="comment">//路径重写 将所有以jing开头的转换为 空  这里面要写正则表达式</span></span><br><span class="line">    <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/jing&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">ws</span>: <span class="literal">true</span>,<span class="comment">//用于支持websocket</span></span><br><span class="line">    <span class="attr">changeOrigin</span>: <span class="literal">true</span><span class="comment">//用于控制请求头中的host值</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;/demo&#x27;</span>: &#123;<span class="comment">//请求前缀</span></span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,</span><br><span class="line">    <span class="comment">//路径重写 将所有以jing开头的转换为 空  这里面要写正则表达式</span></span><br><span class="line">    <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/demo&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">ws</span>: <span class="literal">true</span>,<span class="comment">//用于支持websocket</span></span><br><span class="line">    <span class="attr">changeOrigin</span>: <span class="literal">true</span><span class="comment">//用于控制请求头中的host值</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">changeOrigin</span>:设置为 <span class="literal">true</span>  服务器收到的请求头的host为 <span class="number">5000</span></span><br><span class="line"><span class="attr">changeOrigin</span>:设置为 <span class="literal">false</span>  服务器收到的请求头的host为 <span class="number">8080</span></span><br><span class="line">changeOrigin 默认为<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"><span class="number">1</span>、优点：可以配置多个代理，并且可以灵活的控制请求是否走代理</span><br><span class="line"><span class="number">2</span>、缺点：配置略微繁琐，请求资源时必须加前缀</span><br></pre></td></tr></table></figure><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>1、作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于<strong style="color:#DD5145">父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件 </strong><br>2、分类 ：默认插槽 、 具名插槽 、作用域插槽<br>3、使用方式<br>    （1）、默认插槽</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  父组件中</span><br><span class="line"> <span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;美食&quot;</span> <span class="attr">:list</span>=<span class="string">&quot;foods&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/ppp.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  子组件中</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; title &#125;&#125;分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义一个插槽（挖一个坑，等着组件的使用者来进行填充） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>插槽，当使用者没有传具体的结构的时候，就显示这个插槽里面的东西<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）、具名插槽</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">父组件中</span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;美食&quot;</span> <span class="attr">:list</span>=<span class="string">&quot;foods&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/ppp.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;foot&quot;</span>&gt;</span>更多美食<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line">子组件中</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; title &#125;&#125;分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义一个插槽（挖一个坑，等着组件的使用者来进行填充） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>插槽，当使用者没有传具体的结构的时候，就显示这个插槽里面的东西&lt;/slot</span><br><span class="line">    &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>插槽，当使用者没有传具体的结构的时候，就显示这个插槽里面的东西&lt;/slot</span><br><span class="line">    &gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">```   </span><br><span class="line">（3）、作用域插槽</span><br><span class="line"></span><br><span class="line">    理解：数据在组件自身，但是数据生成的结构需要组件的使用者来决定（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</span><br><span class="line">```html</span><br><span class="line">父组件中 </span><br><span class="line"> <span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(g, index) in games.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; g &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-for</span>=<span class="string">&quot;(g, index) in games.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; g &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line">子组件中</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; title &#125;&#125;分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义一个插槽（挖一个坑，等着组件的使用者来进行填充） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:games</span>=<span class="string">&quot;games&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>插槽，当使用者没有传具体的结构的时候，就显示这个插槽里面的东西&lt;/slot</span><br><span class="line">    &gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;Category&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&quot;title&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">games</span>: [<span class="string">&quot;王者荣耀&quot;</span>, <span class="string">&quot;和平精英&quot;</span>, <span class="string">&quot;蛋仔派对&quot;</span>, <span class="string">&quot;原神&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>node.js</title>
      <link href="/2022/12/02/nodejs/"/>
      <url>/2022/12/02/nodejs/</url>
      
        <content type="html"><![CDATA[<h2 id="jing的哈哈哈"><a href="#jing的哈哈哈" class="headerlink" title="jing的哈哈哈"></a>jing的哈哈哈</h2><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><blockquote><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><p>1、被用来给元素或子组件注册引用信息<br>2、应用在html标签上获取的是真实的DOM元素，应用在子组件标签上获取的是组件实例对象 vc<br>3、使用方式</p><blockquote><ul><li>打标识:<br> <code>&lt;h1 v-text=&quot;msg&quot; ref=&quot;title&quot;&gt;xxx&lt;/h1&gt;</code><br>   <code>&lt;School ref=&quot;sch&quot; /&gt;</code></li><li>获取：<blockquote><ul><li>console.log(this.$refs.title);  真实的DOM元素 </li><li>console.log(this.$refs.sch);  School组件的实例对象 vc</li></ul></blockquote></li></ul></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jing的第一篇文章</title>
      <link href="/2022/11/30/22-11-30-jing%E7%9A%84%E7%AC%AC%E4%B8%80%E7%89%87%E6%96%87%E7%AB%A0/"/>
      <url>/2022/11/30/22-11-30-jing%E7%9A%84%E7%AC%AC%E4%B8%80%E7%89%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="jing的哈哈哈"><a href="#jing的哈哈哈" class="headerlink" title="jing的哈哈哈"></a>jing的哈哈哈</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
