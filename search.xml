<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>尚品汇</title>
      <link href="/2023/02/27/project/"/>
      <url>/2023/02/27/project/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue前台项目"><a href="#Vue前台项目" class="headerlink" title="Vue前台项目"></a>Vue前台项目</h1><p>技术架构：vue+webpack+vuex+vue-rotuer+axios+less</p><h1 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h1><p>1、跨域<br>2、过渡动画<br>3、自定义事件</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试宝典</title>
      <link href="/2023/02/27/interview/"/>
      <url>/2023/02/27/interview/</url>
      
        <content type="html"><![CDATA[<h3 id="6种组件间通信方式"><a href="#6种组件间通信方式" class="headerlink" title="6种组件间通信方式"></a>6种组件间通信方式</h3><h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><p>使用场景：父子组件通信<br>注意事项：如果父组件给子组件传递数据（函数）：本质就是子组件给父组件传递数据<br>如果父组件给子组件传递的数据（非函数）：本质就是父组件给子组件提供数据</p><p>props书写方式：3种<br>数组[]<br>对象{type:Array}<br>对象 {type:Array,default:[]}</p><h5 id="传递数据："><a href="#传递数据：" class="headerlink" title="传递数据："></a>传递数据：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">uname</span>=<span class="string">&quot;羊仔&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;男&quot;</span> <span class="attr">:age</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在属性的前面加上冒号 --&gt;</span></span><br></pre></td></tr></table></figure><h5 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h5><pre><code>    第一种方式（只接收）：      props: [&quot;uname&quot;, &quot;sex&quot;, &quot;age&quot;],     第二种方式（限制类型）：          props: &#123;           uname: String,           sex: String,           age: Number,           &#125;,      第三种方式（限制类型、限制必要性、指定默认值）            props: &#123;              uname: &#123;                type: String, //uname的类型是字符串                required: true, //uname是必要的              &#125;,              sex: &#123;                type: String, //sex的类型是字符串                required: true, //sex是必要的              &#125;,              age: &#123;                type: Number, //age的类型是数字型                required: true, //age是必要的                default: 20, //默认值              &#125;,            &#125;,   </code></pre><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。 </p><p>提示：路由的props<br>书写方式：布尔值、对象、函数</p><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><p>使用场景：子组件给父组件传递数据<br>$on  $emit<br>1、绑定自定义事件<br>     （1）、第一种方式 ： 在父组件中<br>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">v-on:jing</span>=<span class="string">&quot;getStudentName&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span>  或  <span class="tag">&lt;<span class="name">Student</span> @<span class="attr">jing</span>=<span class="string">&quot;getStudentName&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br></pre></td></tr></table></figure><br>  （2）、第二种方式： 在父组件中<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;<span class="title class_">Student</span> ref=<span class="string">&quot;student&quot;</span> &gt;&lt;/<span class="title class_">Student</span>&gt;</span><br><span class="line"> ....</span><br><span class="line"> <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$on(<span class="string">&quot;jing&quot;</span>, <span class="variable language_">this</span>.<span class="property">getStudentName</span>); <span class="comment">//绑定自定义事件</span></span><br><span class="line"> &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>  （3）、若想让自定义事件只触发一次，可以使用once修饰符 或  $once()方法</p><p>2、、触发自定义事件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">&quot;jing&quot;</span>, <span class="variable language_">this</span>.<span class="property">uname</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);<span class="comment">//谁绑定了就找谁触发</span></span><br><span class="line">    </span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string">3、解绑自定义事件：</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"></span><br><span class="line">     <span class="variable language_">this</span>.$off(<span class="string">&quot;jing&quot;</span>); <span class="comment">//解绑一个自定义事件</span></span><br><span class="line">     <span class="variable language_">this</span>.$off([<span class="string">&quot;jing&quot;</span>, <span class="string">&quot;demo&quot;</span>]); <span class="comment">//解绑多个自定义事件</span></span><br><span class="line">     <span class="variable language_">this</span>.$off(); <span class="comment">//解绑所有的自定义事件</span></span><br></pre></td></tr></table></figure><p>  4、组件上也可以绑定原生DOM事件，不过需要native修饰符 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">ref</span>=<span class="string">&quot;student&quot;</span> @<span class="attr">click.native</span>=<span class="string">&quot;show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 给组件绑定原生DOM事件 后面必须加native --&gt;</span></span><br></pre></td></tr></table></figure><p>this.$destroy(); &#x2F;&#x2F;销毁了当前t组件的实例，销毁后所有组件实例的自定义事件全都不奏效了 （现在所有的事件都不奏效，包括js原生事件）</p><h4 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h4><p>任意组件间通信<br>$bus<br>在main.js中添加 Vue.prototype.$bus&#x3D;this<br> this.$bus.$emit提供数据<br>  this.$bus.$on接收数据</p><h4 id="pubsub-js"><a href="#pubsub-js" class="headerlink" title="pubsub-js"></a>pubsub-js</h4><p>任意组件间通信<br>在react框架中使用的比较高（发布与订阅）<br>订阅消息（需要数据的订阅消息，重要的是消息的内容）  （提供数据的发布消息，重要的是消息名）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里有两个参数，magName是消息名，data是收到的数据</span></span><br><span class="line"><span class="comment">//提供数据</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">pubId</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&quot;hello&quot;</span>, <span class="function">(<span class="params">magName, data</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;有人发布了hello消息，hello消息的回调执行了&quot;</span>, data);</span><br><span class="line">   &#125;);</span><br><span class="line">pubsub.<span class="title function_">publish</span>(<span class="string">&quot;hello&quot;</span>, <span class="number">9999</span>);<span class="comment">//接收数据</span></span><br></pre></td></tr></table></figure><h4 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h4><p>任意组件间通信</p><h5 id="安装vuex"><a href="#安装vuex" class="headerlink" title="安装vuex"></a>安装vuex</h5><p>npm i vuex@3 配合vue2使用<br>npm i vuex@4 配合vue3使用  </p><h5 id="搭建vuex环境"><a href="#搭建vuex环境" class="headerlink" title="搭建vuex环境"></a>搭建vuex环境</h5><p>1、创建文件：src&#x2F;store&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该文件用于创建Vuex中最为核心的store</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 使用vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)<span class="comment">//此时vc身上就有了store这个配置项,创建Vue实例的时候就可以用store来管理actions,mutations,state</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions 用于响应组件中的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations  用于加工（操作）数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state 用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"><span class="comment">//类似于计算属性  当state中的数据需要加工后在使用时，可以使用getters加工</span></span><br><span class="line"><span class="keyword">const</span> getters=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露7store 用来管理以上三个</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2、在main.js中创建vm时传入store配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Vue实例vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    <span class="comment">//使用store</span></span><br><span class="line">    store,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>组件中读取vuex中的数据</p><pre><code>    this.$store.state.sum</code></pre><p>组件中修改vuex中的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;action中的方法名&quot;</span>, 数据);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;mutations中的方法名&quot;</span>, 数据);</span><br><span class="line">备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写dispatch,直接写commit</span><br></pre></td></tr></table></figure><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><p>使用场景：父子组件通信（通信的一般是结构）</p><h5 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  父组件中</span><br><span class="line"> <span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;美食&quot;</span> <span class="attr">:list</span>=<span class="string">&quot;foods&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/ppp.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  子组件中</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; title &#125;&#125;分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义一个插槽（挖一个坑，等着组件的使用者来进行填充） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>插槽，当使用者没有传具体的结构的时候，就显示这个插槽里面的东西<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">父组件中</span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;美食&quot;</span> <span class="attr">:list</span>=<span class="string">&quot;foods&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/ppp.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;foot&quot;</span>&gt;</span>更多美食<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line">子组件中</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; title &#125;&#125;分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义一个插槽（挖一个坑，等着组件的使用者来进行填充） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>插槽，当使用者没有传具体的结构的时候，就显示这个插槽里面的东西&lt;/slot</span><br><span class="line">    &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>插槽，当使用者没有传具体的结构的时候，就显示这个插槽里面的东西&lt;/slot</span><br><span class="line">    &gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h5><p>理解：数据在组件自身，但是数据生成的结构需要组件的使用者来决定（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定,就是说子组件决定不了自身的结构与样式）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">父组件中 </span><br><span class="line"> <span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(g, index) in games.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; g &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-for</span>=<span class="string">&quot;(g, index) in games.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; g &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line">子组件中</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; title &#125;&#125;分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义一个插槽（挖一个坑，等着组件的使用者来进行填充） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:games</span>=<span class="string">&quot;games&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>插槽，当使用者没有传具体的结构的时候，就显示这个插槽里面的东西&lt;/slot</span><br><span class="line">    &gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;Category&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&quot;title&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">games</span>: [<span class="string">&quot;王者荣耀&quot;</span>, <span class="string">&quot;和平精英&quot;</span>, <span class="string">&quot;蛋仔派对&quot;</span>, <span class="string">&quot;原神&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作用域和执行上下文的区别？"><a href="#作用域和执行上下文的区别？" class="headerlink" title="作用域和执行上下文的区别？"></a>作用域和执行上下文的区别？</h3><p>1、函数的执行上下文是在函数调用的时候生成的，而其作用域是在创建的时候就已经创建好了<br>2、作用域包含了若干个函数执行上下文，也有可能是零个（因为函数还没有执行）</p><h3 id="this的指向问题"><a href="#this的指向问题" class="headerlink" title="this的指向问题"></a>this的指向问题</h3><p>this的指向只有在调用时才能确定，因为this是执行上下文的一部分<br>1、全局作用域中的函数：this的指向是window<br>2、对象内部的函数：this的指向是其对象本身<br>3、构造函数：this的指向是他的实例对象<br>4、由apply、call、bind改造的函数：this的指向是他的第一个参数<br>5、箭头函数：箭头函数没有自己的this,他的this是其上下文中的this</p><h3 id="如何理解同步和异步"><a href="#如何理解同步和异步" class="headerlink" title="如何理解同步和异步"></a>如何理解同步和异步</h3><p>同步：同步就是按照代码的顺序，从上往下依次执行<br>异步：可以理解为是一种并行行为，意思就是可以不必等到上一段代码执行完毕，就可以执行其他的代码。<br>js之所以需要异步是因为js是单线程的，常用的异步场景有：定时器，ajax请求、事件绑定等</p><h3 id="实现异步的方式有哪些"><a href="#实现异步的方式有哪些" class="headerlink" title="实现异步的方式有哪些"></a>实现异步的方式有哪些</h3><p>1、回调函数<br>2、事件监听<br>3、发布订阅模式<br>4、Promise<br>5、async&#x2F;await<br>6、利用生成器实现</p><h3 id="怎样理解Promise对象"><a href="#怎样理解Promise对象" class="headerlink" title="怎样理解Promise对象"></a>怎样理解Promise对象</h3><p>Promise对象有以下两个特点：<br>1、对象的状态不受外界的影响。Promise对象一共有三种状态，pending、fulfilled、rejected。状态值只会被异步的结果决定，其他操作无法改变。<br>2、状态一旦改变，就不会再变，且任何时候都可以得到这个结果。状态值会由pending–&gt;fulfilled或pending–&gt;rejected，这时既是resloved<br>Promise有以下三个缺点：<br>1、Promise一旦执行就无法取消<br>2、不可设置回调函数，其内部的错误无法捕获<br>3、当Promise处于pending的时候，无法得知具体发展道路那一步<br>Promise中常用的方法（记得敲代码）<br>1、.then()  .catch() </p><h3 id="事件委派"><a href="#事件委派" class="headerlink" title="事件委派"></a>事件委派</h3><p>事件委派也叫做事件代理，就是不在子元素上绑定事件监听器，而是把子元素的的事件都绑定到父元素的身上，利用事件冒泡的原理进行</p><h3 id="解释一下变量提升"><a href="#解释一下变量提升" class="headerlink" title="解释一下变量提升"></a>解释一下变量提升</h3><p>变量提升是js的默认行为，这意味着将所有的变量提升到当前作用域的顶部，并且可以在声明之前使用变量。初始化不会被提升，提升仅作用于白能量的声明。</p><h3 id="cooKies机制和session机制的区别"><a href="#cooKies机制和session机制的区别" class="headerlink" title="cooKies机制和session机制的区别"></a>cooKies机制和session机制的区别</h3><p>1、cookies数据保存在客户端，session数据保存在服务端<br>2、cookies可以减轻服务器的压力，但是不安全，容易进行cookies欺骗<br>3、session安全一点，但是占用服务器资源</p><h3 id="get和post的区别"><a href="#get和post的区别" class="headerlink" title="get和post的区别"></a>get和post的区别</h3><p>1、url可见性<br>get:url参数可见，post：url参数不可见<br>2、数据传输上<br>get:通过拼接url进行传递参数<br>post:通过body体传递参数<br>3、缓存性<br>get请求是可以缓存的，post请求不可以缓存<br>4、后退页面的反应<br>get请求页面后退时，不产生影响<br>post请求页面后退时，会重新提交请求<br>5、传输的数据大小<br>get一般传输的数据大小不超过2k-4k<br>post请求传输的数据大小根据php.ini配置文件设定，也可以无限大<br>6、安全性<br>原则上post肯定要比get请求安全，毕竟传输参数时url不可见，但是有人闲的没事会抓包，所以也没啥区别<br>7、数据包<br>简单来说，get产生一个TCP数据包，post生成两个TCP数据包，对于get方式的请求，浏览器会把http header和data一并发送出去，然后服务器响应200（返回数据）；对于post来说，浏览器会先发送header,服务器响应100 continue,浏览器在发送data,服务器响应200（返回数据）</p><h3 id="textContent-innerText-innerHTML-value的区别"><a href="#textContent-innerText-innerHTML-value的区别" class="headerlink" title="textContent,innerText,innerHTML,value的区别"></a>textContent,innerText,innerHTML,value的区别</h3><p>1、textContent用来获取和设置文本内容，与innerText不同的是textContent可以获取到的内容包括了元素中的style标签和script标签的内容<br>2、innerText只能获取和设置文本内容。不能设置html标签<br>3、innerHTML可以获取和设置html标签<br>4、value，用来获取表单数据</p><h3 id="什么叫DOM事件流"><a href="#什么叫DOM事件流" class="headerlink" title="什么叫DOM事件流"></a>什么叫DOM事件流</h3><p>事件发生时会在元素节点之间按照特定的顺序传播，整个过程分为捕获阶段、目标阶段和冒泡阶段，这个传播过程就是DOM事件流<br>事件冒泡：就是从小到大，事件源到document<br>事件捕获：就是从大到小，document到事件源</p><h3 id="如何让事件先冒泡后捕获"><a href="#如何让事件先冒泡后捕获" class="headerlink" title="如何让事件先冒泡后捕获"></a>如何让事件先冒泡后捕获</h3><p>在原本的的事件流中，是先捕获在冒泡<br>可以给目标元素，绑定两个事件监听器，一个用于冒泡，一个用于捕获，然后将两个事件的执行顺序是按照代码的顺序执行的，所以先写冒泡，在写捕获</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue冲冲冲！</title>
      <link href="/2022/12/19/vue/"/>
      <url>/2022/12/19/vue/</url>
      
        <content type="html"><![CDATA[<h1 id="vue笔记"><a href="#vue笔记" class="headerlink" title="vue笔记"></a>vue笔记</h1><h2 id="脚手架文件结构"><a href="#脚手架文件结构" class="headerlink" title="脚手架文件结构"></a>脚手架文件结构</h2><pre><code>├── node_modules ├── public│   ├── favicon.ico: 页签图标│   └── index.html: 主页面├── src│   ├── assets: 存放静态资源│   │   └── logo.png│   │── component: 存放组件│   │   └── HelloWorld.vue│   │── App.vue: 汇总所有组件│   │── main.js: 入口文件├── .gitignore: git版本管制忽略的配置├── babel.config.js: babel的配置文件├── package.json: 应用包配置文件 ├── README.md: 应用描述文件├── package-lock.json：包版本控制文件</code></pre><h2 id="关于不同版本的Vue"><a href="#关于不同版本的Vue" class="headerlink" title="关于不同版本的Vue"></a>关于不同版本的Vue</h2><blockquote><p>1、vue.js和vue.runtime.xxx.js的区别：<br>     （1）、vue.js时完整版的Vue，包含：核心模块和模板解析器<br>     （2）、vue.runtime.xxx.js时运行版Vue，只包含：核心功能，没有模板解析器</p><p>2、因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用render函数接收到的createElement函数去指定具体内容</p></blockquote><h2 id="vue-config-js配置文件"><a href="#vue-config-js配置文件" class="headerlink" title="vue.config.js配置文件"></a>vue.config.js配置文件</h2><blockquote><p>使用vue inspect &gt; output.js可以查看Vue脚手架的默认配置<br>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh/config/">https://cli.vuejs.org/zh/config/</a>    </p></blockquote><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><blockquote><p>1、被用来给元素或子组件注册引用信息<br>2、应用在html标签上获取的是真实的DOM元素，应用在子组件标签上获取的是组件实例对象 vc<br>3、使用方式</p><blockquote><ul><li>打标识:<br> <code>&lt;h1 v-text=&quot;msg&quot; ref=&quot;title&quot;&gt;xxx&lt;/h1&gt;</code><br>   <code>&lt;School ref=&quot;sch&quot; /&gt;</code></li><li>获取：<blockquote><ul><li>console.log(this.$refs.title);  真实的DOM元素 </li><li>console.log(this.$refs.sch);  School组件的实例对象 vc</li></ul></blockquote></li></ul></blockquote></blockquote><h2 id="配置项props"><a href="#配置项props" class="headerlink" title="配置项props"></a>配置项props</h2><pre><code>功能:让组件接受外部传过来的数据 （1）、传递数据：     &lt;Student uname=&quot;羊仔&quot; sex=&quot;男&quot; :age=&quot;18&quot;&gt;&lt;/Student&gt; （2）、接收数据    第一种方式（只接收）：      props: [&quot;uname&quot;, &quot;sex&quot;, &quot;age&quot;],     第二种方式（限制类型）：          props: &#123;           uname: String,           sex: String,           age: Number,           &#125;,      第三种方式（限制类型、限制必要性、指定默认值）            props: &#123;              uname: &#123;                type: String, //uname的类型是字符串                required: true, //uname是必要的              &#125;,              sex: &#123;                type: String, //sex的类型是字符串                required: true, //sex是必要的              &#125;,              age: &#123;                type: Number, //age的类型是数字型                required: true, //age是必要的                default: 20, //默认值              &#125;,            &#125;,   </code></pre><blockquote><ul><li>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了<br>修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</li></ul></blockquote><h2 id="mixin-混合-x2F-混入"><a href="#mixin-混合-x2F-混入" class="headerlink" title="mixin(混合&#x2F;混入)"></a>mixin(混合&#x2F;混入)</h2><pre><code>功能:可以把多个组件共用的配置提取成一个混入对象# 本地图片</code></pre>  <img src="./src/assets/mixin.png" alt="示例图片" style="zoom:50%;" /><pre><code>使用方式:  第一步：定义混合 （在main.ja的同级目录下，创建一个mixin.js文件）</code></pre> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">//将混合暴露出模块</span></span><br><span class="line">      <span class="keyword">export</span> <span class="keyword">const</span> mixin = &#123;</span><br><span class="line">          <span class="attr">methods</span>: &#123;</span><br><span class="line">              <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">                  <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">uname</span>);</span><br><span class="line">              &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">      &#125;</span><br><span class="line"><span class="string">``</span><span class="string">`     </span></span><br><span class="line"><span class="string">      第二步：使用混合：</span></span><br><span class="line"><span class="string">       （1）、全局引入（写在main.js中）</span></span><br><span class="line"><span class="string">            import &#123; mixin &#125; from &#x27;./mixin&#x27;</span></span><br><span class="line"><span class="string">            Vue.mixin(mixin)</span></span><br><span class="line"><span class="string">       （2）、局部引入</span></span><br><span class="line"><span class="string">           import &#123; mixin &#125; from &quot;../mixin&quot;;</span></span><br><span class="line"><span class="string">           mixins: [mixin],</span></span><br><span class="line"><span class="string"> + 注意：</span></span><br><span class="line"><span class="string"> &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=MistyRose&gt;</span></span><br><span class="line"><span class="string">全局引入 &lt;font color=red&gt;写在main.js中&lt;/font&gt;</span></span><br><span class="line"><span class="string">局部引入 &lt;font color=red&gt;写在要引入的组件中&lt;/font&gt;</span></span><br><span class="line"><span class="string">&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 插件</span></span><br><span class="line"><span class="string"> &gt;     功能：用于增强Vue</span></span><br><span class="line"><span class="string">&gt;     本质：包含install方法的一个对象，install的第一个参数是Vue，第二个参数是插件使用者传递的数据。</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">    定义插件：</span><br><span class="line">     install = <span class="keyword">function</span>(<span class="params">Vue,options</span>)&#123;</span><br><span class="line">        <span class="comment">//全局过滤器必须在new Vue实例之前就写好</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&quot;mySlice&quot;</span>, <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">4</span>) <span class="comment">//从索引号开始，截取4位</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="comment">//全局指令 </span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;fBind&#x27;</span>, &#123;</span><br><span class="line">        <span class="comment">// 指令与元素成功绑定的时候会被调用</span></span><br><span class="line">        <span class="title function_">bind</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">            element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bind&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//指令所在元素被插入页面的时候调用</span></span><br><span class="line">        <span class="title function_">inserted</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">            element.<span class="title function_">focus</span>()</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;inserted&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 当指令所在的模板被重新解析时就会被调用</span></span><br><span class="line">        <span class="title function_">update</span>(<span class="params">element, binding</span>) &#123;</span><br><span class="line">            element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;update&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//全局混入</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">       <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> &#123;</span><br><span class="line">               <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">               <span class="attr">y</span>: <span class="number">2</span>,</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//给Vue原型上添加一个方法（vm和vc上面都可以用了）  Vue原型上面的属性和方法 vm 和 vc 都可以用 </span></span><br><span class="line">      <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="function">() =&gt;</span> &#123; <span class="title function_">alert</span>(<span class="string">&quot;bkpp是真的！！！&quot;</span>) &#125;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><h2 id="scoped-样式"><a href="#scoped-样式" class="headerlink" title="scoped 样式"></a>scoped 样式</h2><blockquote><p>   功能：让样式在局部生效<br>   写法：<code>&lt;style scoped&gt;</code></p></blockquote><h2 id="总结TodoList案例"><a href="#总结TodoList案例" class="headerlink" title="总结TodoList案例"></a>总结TodoList案例</h2><p>  1、 组件化编码流程:</p><pre><code> (1)、 拆分静态组件:组件要按照功能点拆分.命名不要与html元素冲突 (2)、实现动态组件:考虑好数据的存放位置,数据是一个组件在用,还是一些组件     在用    1)、 一个组件在用:放在组件自身    2)、 一些组件在用:放在他们共同的父组件上面(状态提升) (3)、 实现交互:从绑定事件开始</code></pre><p>  2 props适用于</p><pre><code>   (1)、 父组件===&gt;子组件 通信 (属性)   (2)、 子组件 ===&gt; 父组件  通信 (方法, 要求父组件事先准备一个函数,传给子组件,子组件在适当的时机调用)</code></pre><p>  3、 使用v-model时要切记,v-model绑定的值不能时props传过来的值,因为props时不可修改的<br>  4、 props传过来的若是对象类型的值,修改对象中的属性时vue监测不到,不会报错,但是不推荐这样做  </p><h2 id="webStorage"><a href="#webStorage" class="headerlink" title="webStorage"></a>webStorage</h2><p>  1、存储内容的大小一般支持5MB左右（不同浏览器可能还不一样）<br>  2、浏览器能通过Window.sessionStorage和Window.localStorage属性来实现本地存储机制<br>  3、相关API:</p><pre><code>(1)、xxxStorage.setItem(&#39;key&#39;,&#39;value&#39;)      该方法接受一个键和值作为参数，会把键值对添加加到存储中，如果键名存在，则更新对应的值（2）、xxxStorage.getItem(&#39;person&#39;)           该方法接受一个键名作为参数，返回键名对应的值（3）、xxxxStorage.removeItem(&#39;key&#39;)         该方法接受一个键名作为参数，并把该键名从存储中删除（4）、xxxxStorage.clear()        该方法会清除存储中的所有数据</code></pre><p>  4、备注：</p><pre><code> 1、sessionStorage存储的内容会随浏览器窗口的关闭而消失 2、localStroage存储的内容，需要手动清除才会消失 3、xxxStorage.getItem(&#39;key&#39;)如果key对应的value找不到，那么getItem返回的就是null 4、JSON.parse(null) 返回的结果仍为null</code></pre><h2 id="组建的自定义事件"><a href="#组建的自定义事件" class="headerlink" title="组建的自定义事件"></a>组建的自定义事件</h2><p>   1、一种组件间通信的方式：子组件 &#x3D;&#x3D;&#x3D;&gt; 父组件<br>   2、使用场景：子组件想给父组件传数据，那么就要在父组件中给子组件绑定自定义事件（事件的回调在父组件中）<br>  3、绑定自定义事件<br>     （1）、第一种方式 ： 在父组件中<br>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">v-on:jing</span>=<span class="string">&quot;getStudentName&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span>  或  <span class="tag">&lt;<span class="name">Student</span> @<span class="attr">jing</span>=<span class="string">&quot;getStudentName&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br></pre></td></tr></table></figure><br>  （2）、第二种方式： 在父组件中<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> &lt;<span class="title class_">Student</span> ref=<span class="string">&quot;student&quot;</span> &gt;&lt;/<span class="title class_">Student</span>&gt;</span><br><span class="line"> ....</span><br><span class="line"> <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">student</span>.$on(<span class="string">&quot;jing&quot;</span>, <span class="variable language_">this</span>.<span class="property">getStudentName</span>); <span class="comment">//绑定自定义事件</span></span><br><span class="line"> &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>  （3）、若想让自定义事件只触发一次，可以使用once修饰符 或  $once()方法</p><p>   4、触发自定义事件：</p><pre><code>this.$emit(&quot;jing&quot;, this.uname, 1, 2, 3, 4);</code></pre><p>  5、解绑自定义事件：</p><pre><code> this.$off(&quot;jing&quot;); //解绑一个自定义事件 this.$off([&quot;jing&quot;, &quot;demo&quot;]); //解绑多个自定义事件 this.$off(); //解绑所有的自定义事件</code></pre><p>  6、组件上也可以绑定原生DOM事件，不过需要native修饰符<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Student</span> <span class="attr">ref</span>=<span class="string">&quot;student&quot;</span> @<span class="attr">click.native</span>=<span class="string">&quot;show&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Student</span>&gt;</span></span><br></pre></td></tr></table></figure><br>   7、注意：</p><pre><code>通过 this.$refs.student.$on(&quot;jing&quot;,回调); 绑定的自定义事件，回调要么配置在methods中，要么使用箭头函数</code></pre><h2 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h2><p>  1、一种组件间的通信方式：适用于任意组件间通信<br>  2、安装全局事件总线</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">   <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">   <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//生命周期里面的this是vue实例</span></span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>   3、使用事件总线<br>    （1）、接收数据：A组件先后接受数据，则在A组件中给$bus绑定自定义事件， <strong style="color:#DD5145">事件的回调留在A中</strong><br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&quot;hello&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">//绑定hello这个自定义事件</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是School组件，我收到了数据&quot;</span>, data);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    ....</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>    (2)、提供数据  </p><pre><code>   this.$bus.$emit(&quot;hello&quot;, this.uname);</code></pre><p> 4、最好在 beforeDestroy钩子中，用<strong style="color:#DD5145">$off解绑当前组件用到的自定义事件 </strong>     </p><pre><code> this.$bus.$off(&quot;hello&quot;);</code></pre><h2 id="消息订阅与发布（pubsub）"><a href="#消息订阅与发布（pubsub）" class="headerlink" title="消息订阅与发布（pubsub）"></a>消息订阅与发布（pubsub）</h2><p> 1、一种组件间通信的方式，适用于任意组件间通信<br> 2、使用步骤<br>   （1）、安装pubsub: npm i pubsub-js<br>   （2）、引入 import pubsub from “pubsub-js”;<br>    （3）、接受数据：A组件想接受数据，则在A组件中订阅消息，订阅消息的回调留在A组件自身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//订阅消息（需要数据的订阅消息，重要的是消息的内容）  （提供数据的发布消息，重要的是消息名）</span></span><br><span class="line">    <span class="comment">//这里有两个参数，magName是消息名，data是收到的数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">pubId</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&quot;hello&quot;</span>, <span class="function">(<span class="params">magName, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;有人发布了hello消息，hello消息的回调执行了&quot;</span>, data);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4、提供数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    pubsub.publish(&quot;hello&quot;, 9999);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5、最好在beforeDestroy钩子中，取消订阅 ， &lt;strong style=&quot;color:#DD5145&quot;&gt;通过id进行取消订阅操作 &lt;/strong&gt;  </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">    <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//每一次订阅，消息的id都是不同的值，需要通过id取消订阅  </span></span><br><span class="line">    pubsub.<span class="title function_">unsubscribe</span>(<span class="variable language_">this</span>.<span class="property">pubId</span>);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h2 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h2><p>1、语法：this.$nextTick(回调函数)<br>2、作用：在下一次DOM更新结束后执行其指定的回调<br>3、什么时候用：当数据改变后，要基于更新后的新DOM进行某些操作，要在nextTick所指定的回调函数中执行</p><h2 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h2><p>1、作用：在插入、更新或移除DOM元素时，在合适的时候给元素添加样式类名<br>2、Enter: v-enter  v-enter-active  v-enter-to<br>    Leave:v-leave   v-leave-active  v-leave-to<br>3、写法</p><pre><code>  （1）、准备好样式    元素进入的样式 enter    v-enter  进入的起点    v-enter-active  进入的过程中    v-enter-to  进入的终点  元素离开的样式 leave    v-leave  离开的起点    v-leave-active  离开的过程    v-leave-to  离开的终点</code></pre><p>   （2）、使用 transition  标签包裹要过度的元素，并配置nane属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">:appear</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果给transition标签起名，那么下面对应的动画也要改名字   .hello-enter-active8--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span> </span><br></pre></td></tr></table></figure><p>  （3）、备注<br>    若有多个元素需要过度，则需要使用  transition-group标签，并且每一个元素都有一个key值  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">transition-group</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果给transition标签起名，那么下面对应的动画也要改名字  .hello-enter-active8--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- transition标签里面只能由一个元素 ， 如果要给多个元素添加过度效果，需要用 transition-group 并且每一个元素都有一个唯一的key值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span> <span class="attr">key</span>=<span class="string">&quot;2&quot;</span>&gt;</span>bkpp<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h2><h5 id="方法一：-在vue-config-js中添加如下配置"><a href="#方法一：-在vue-config-js中添加如下配置" class="headerlink" title="方法一：  在vue.config.js中添加如下配置"></a>方法一：  在vue.config.js中添加如下配置</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">     <span class="attr">proxy</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   说明：</span><br><span class="line">   <span class="number">1</span>、优点：配置简单，请求资源时直接发送给前端（<span class="number">8080</span>）即可</span><br><span class="line">   <span class="number">2</span>、缺点：不能配置多个代理，不能灵活的控制请求是否走代理</span><br><span class="line">   <span class="number">3</span>、工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器（优先匹配前端资源）</span><br></pre></td></tr></table></figure><h5 id="方法二：-在vue-config-js中配置具体代理规则："><a href="#方法二：-在vue-config-js中配置具体代理规则：" class="headerlink" title="方法二：   在vue.config.js中配置具体代理规则："></a>方法二：   在vue.config.js中配置具体代理规则：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line"><span class="attr">proxy</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;/api&#x27;</span>: &#123;<span class="comment">//匹配所有以 &#x27;/api&#x27; 开头的请求路径</span></span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,  <span class="comment">//代理目标的基础路径</span></span><br><span class="line">    <span class="comment">//路径重写 将所有以jing开头的转换为 空  这里面要写正则表达式</span></span><br><span class="line">    <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/jing&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">ws</span>: <span class="literal">true</span>,<span class="comment">//用于支持websocket</span></span><br><span class="line">    <span class="attr">changeOrigin</span>: <span class="literal">true</span><span class="comment">//用于控制请求头中的host值</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;/demo&#x27;</span>: &#123;<span class="comment">//请求前缀</span></span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,</span><br><span class="line">    <span class="comment">//路径重写 将所有以jing开头的转换为 空  这里面要写正则表达式</span></span><br><span class="line">    <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/demo&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">    <span class="attr">ws</span>: <span class="literal">true</span>,<span class="comment">//用于支持websocket</span></span><br><span class="line">    <span class="attr">changeOrigin</span>: <span class="literal">true</span><span class="comment">//用于控制请求头中的host值</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">changeOrigin</span>:设置为 <span class="literal">true</span>  服务器收到的请求头的host为 <span class="number">5000</span></span><br><span class="line"><span class="attr">changeOrigin</span>:设置为 <span class="literal">false</span>  服务器收到的请求头的host为 <span class="number">8080</span></span><br><span class="line">changeOrigin 默认为<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"><span class="number">1</span>、优点：可以配置多个代理，并且可以灵活的控制请求是否走代理</span><br><span class="line"><span class="number">2</span>、缺点：配置略微繁琐，请求资源时必须加前缀</span><br></pre></td></tr></table></figure><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>1、作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于<strong style="color:#DD5145">父组件 &#x3D;&#x3D;&#x3D;&gt; 子组件 </strong><br>2、分类 ：默认插槽 、 具名插槽 、作用域插槽<br>3、使用方式<br>    （1）、默认插槽</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  父组件中</span><br><span class="line"> <span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;美食&quot;</span> <span class="attr">:list</span>=<span class="string">&quot;foods&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./assets/ppp.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  子组件中</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; title &#125;&#125;分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义一个插槽（挖一个坑，等着组件的使用者来进行填充） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span>插槽，当使用者没有传具体的结构的时候，就显示这个插槽里面的东西<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（2）、具名插槽</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">父组件中</span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;美食&quot;</span> <span class="attr">:list</span>=<span class="string">&quot;foods&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">slot</span>=<span class="string">&quot;center&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/ppp.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;foot&quot;</span>&gt;</span>更多美食<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line">子组件中</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; title &#125;&#125;分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义一个插槽（挖一个坑，等着组件的使用者来进行填充） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>插槽，当使用者没有传具体的结构的时候，就显示这个插槽里面的东西&lt;/slot</span><br><span class="line">    &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>插槽，当使用者没有传具体的结构的时候，就显示这个插槽里面的东西&lt;/slot</span><br><span class="line">    &gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（3）、作用域插槽</p><pre><code>理解：数据在组件自身，但是数据生成的结构需要组件的使用者来决定（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">父组件中 </span><br><span class="line"> <span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">scope</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(g, index) in games.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; g &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Category</span> <span class="attr">title</span>=<span class="string">&quot;游戏&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">v-for</span>=<span class="string">&quot;(g, index) in games.games&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; g &#125;&#125;<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Category</span>&gt;</span></span><br><span class="line"></span><br><span class="line">子组件中</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;category&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; title &#125;&#125;分类<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 定义一个插槽（挖一个坑，等着组件的使用者来进行填充） --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:games</span>=<span class="string">&quot;games&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>插槽，当使用者没有传具体的结构的时候，就显示这个插槽里面的东西&lt;/slot</span><br><span class="line">    &gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;Category&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&quot;title&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">games</span>: [<span class="string">&quot;王者荣耀&quot;</span>, <span class="string">&quot;和平精英&quot;</span>, <span class="string">&quot;蛋仔派对&quot;</span>, <span class="string">&quot;原神&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><h4 id="安装Vuex"><a href="#安装Vuex" class="headerlink" title="安装Vuex"></a>安装Vuex</h4><pre><code>npm i vuex@3 配合vue2使用  npm i vuex@4 配合vue3使用  </code></pre><h5 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h5><p>在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中的多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间同放心的方式，且适用于任意组件间通信。</p><h5 id="2、何时使用"><a href="#2、何时使用" class="headerlink" title="2、何时使用"></a>2、何时使用</h5><pre><code>多个组件需要共享数据时</code></pre><h4 id="3、搭建vuex环境"><a href="#3、搭建vuex环境" class="headerlink" title="3、搭建vuex环境"></a>3、搭建vuex环境</h4><p>1、创建文件：src&#x2F;store&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该文件用于创建Vuex中最为核心的store</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 使用vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)<span class="comment">//此时vc身上就有了store这个配置项,创建Vue实例的时候就可以用store来管理actions,mutations,state</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions 用于响应组件中的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations  用于加工（操作）数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state 用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露7store 用来管理以上三个</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//导出（暴露）store</span></span><br><span class="line"><span class="comment">// export default store</span></span><br></pre></td></tr></table></figure><p>2、在main.js中创建vm时传入store配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Vue实例vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    <span class="comment">//使用store</span></span><br><span class="line">    store,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="4、基本使用"><a href="#4、基本使用" class="headerlink" title="4、基本使用"></a>4、基本使用</h5><p>1、初始化数据</p><pre><code>配置actions,配置mutations,操作文件store文件夹下面的index.js</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该文件用于创建Vuex中最为核心的store</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入Vue</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 使用vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)<span class="comment">//此时vc身上就有了store这个配置项,创建Vue实例的时候就可以用store来管理actions,mutations,state</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions 用于响应组件中的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">// jia(context, value) &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&#x27;actions里面的jia被调用了&#x27;, context, value)</span></span><br><span class="line">    <span class="comment">//     context.commit(&#x27;JIA&#x27;, value)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// jian(context, value) &#123;</span></span><br><span class="line">    <span class="comment">//     console.log(&#x27;actions里面的jian被调用了&#x27;, context, value)</span></span><br><span class="line">    <span class="comment">//     context.commit(&#x27;JIAN&#x27;, value)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="title function_">jiaOdd</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;actions里面的jiaOdd被调用了&#x27;</span>, context, value)</span><br><span class="line">        <span class="keyword">if</span> (context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>) &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">jiaWait</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;actions里面的jiaWait被调用了&#x27;</span>, context, value)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>, value)</span><br><span class="line">        &#125;, <span class="number">500</span>)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备mutations  用于加工（操作）数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">JIA</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutations里面的JIA被调用了&#x27;</span>, state, value)</span><br><span class="line">        state.<span class="property">sum</span> += value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">JIAN</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutations里面的JIAN被调用了&#x27;</span>, state, value)</span><br><span class="line">        state.<span class="property">sum</span> -= value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备state 用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>: <span class="number">0</span>, <span class="comment">//当前的和</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露7store 用来管理以上三个</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//导出（暴露）store</span></span><br><span class="line"><span class="comment">// export default store    </span></span><br></pre></td></tr></table></figure><p>2、组件中读取vuex中的数据</p><pre><code>    this.$store.state.sum</code></pre><p>3、组件中修改vuex中的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;action中的方法名&quot;</span>, 数据);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;mutations中的方法名&quot;</span>, 数据);</span><br><span class="line">备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写dispatch,直接写commit</span><br></pre></td></tr></table></figure><h5 id="5、getters的使用"><a href="#5、getters的使用" class="headerlink" title="5、getters的使用"></a>5、getters的使用</h5><p> 1、概念</p><pre><code>当state中的数据需要加工后在使用时，可以使用getters加工</code></pre><p> 2、在store文件中的index.js中追加配置<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//准备getters  用于将state中的数据进行加工</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露7store 用来管理以上三个</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>3、组件中读取数据</p><pre><code>$store.getters.bigSum</code></pre><h5 id="6、四个map方法的使用"><a href="#6、四个map方法的使用" class="headerlink" title="6、四个map方法的使用"></a>6、四个map方法的使用</h5><p>1、mapState方法：用于帮助我们映射state中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line"> <span class="comment">//借助mapState生成计算属性，从state中读取数据（对象写法）</span></span><br><span class="line">   ...<span class="title function_">mapState</span>(&#123; <span class="attr">sum</span>: <span class="string">&quot;sum&quot;</span>, <span class="attr">school</span>: <span class="string">&quot;school&quot;</span>, <span class="attr">subject</span>: <span class="string">&quot;subject&quot;</span> &#125;),</span><br><span class="line"></span><br><span class="line">   <span class="comment">//借助mapState生成计算属性，从state中读取数据（数组写法）</span></span><br><span class="line">   ...<span class="title function_">mapState</span>([<span class="string">&quot;sum&quot;</span>, <span class="string">&quot;school&quot;</span>, <span class="string">&quot;subject&quot;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 2、mapGetters方法：用于帮助我们映射getters中的数据为计算属性<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="comment">// 借助mapGetters生成计算属性，从getters中读取数据（对象写法）</span></span><br><span class="line">   ...<span class="title function_">mapGetters</span>(&#123; <span class="attr">bigSum</span>: <span class="string">&quot;bigSum&quot;</span> &#125;),</span><br><span class="line">   <span class="comment">// 借助mapGetters生成计算属性，从getters中读取数据（数组写法）</span></span><br><span class="line">   ...<span class="title function_">mapGetters</span>([<span class="string">&quot;bigSum&quot;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br> 3、mapActions方法：用于帮助我们生成与actions对用的方法，即：包含：$store.dispatch(xxx)函数<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">computed</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="title function_">computed</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="comment">//借助mapActions生成对应的方法，方法中会调用dispatch去联系actions（对象的写法）</span></span><br><span class="line">   ...<span class="title function_">mapActions</span>(&#123; <span class="attr">incrementOdd</span>: <span class="string">&quot;jiaOdd&quot;</span>, <span class="attr">incrementWait</span>: <span class="string">&quot;jiaWait&quot;</span> &#125;),</span><br><span class="line">   <span class="comment">//借助mapActions生成对应的方法，方法中会调用dispatch去联系actions（数组的写法）  对应的方法名也要变成jiaOdd  jiaWait</span></span><br><span class="line">   ...<span class="title function_">mapActions</span>([<span class="string">&quot;jiaOdd&quot;</span>, <span class="string">&quot;jiaWait&quot;</span> ]), </span><br><span class="line"> &#125;,</span><br><span class="line"> </span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><br>   4、mapMutations方法：用于帮助我们生成与mutations对用的方法，即：包含：$store.commit(xxx)函数<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">computed</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="comment">//借助mapMutations生成对应的方法，方法中会调用commit去联系mutations（对象的写法）</span></span><br><span class="line">   ...<span class="title function_">mapMutations</span>(&#123; <span class="attr">increment</span>: <span class="string">&quot;JIA&quot;</span>, <span class="attr">decrement</span>: <span class="string">&quot;JIAN&quot;</span> &#125;),</span><br><span class="line">   <span class="comment">//借助mapMutations生成对应的方法，方法中会调用commit去联系mutations（数组的写法） 这样写了之后，对应的方法名也要变成JIA和JIAN</span></span><br><span class="line">   ...<span class="title function_">mapMutations</span>([<span class="string">&quot;JIA&quot;</span>, <span class="string">&quot;JIAN&quot;</span> ])</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure><br>备注：mapActions与mapMutations使 用时，若需要传递参数需要，在模板中绑定事件时需要传递参数，否则函数就是事件对象event</p><h5 id="7、模块化-命名空间"><a href="#7、模块化-命名空间" class="headerlink" title="7、模块化+命名空间"></a>7、模块化+命名空间</h5><p>1、目的：让代码更好的维护，让多种数据分类更加明确<br>2、修改store文件夹里的index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启了模块化编程</span></span><br><span class="line"><span class="comment">//求和相关配置 </span></span><br><span class="line"><span class="keyword">const</span> countOptions = &#123;</span><br><span class="line">    <span class="comment">//开启了模块化之后，就有了名字</span></span><br><span class="line">    <span class="attr">namespaced</span>: <span class="literal">true</span>,<span class="comment">//开启命名空间，目的就是为了让mapState认识countAbout</span></span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="title function_">jiaOdd</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;actions里面的jiaOdd被调用了&#x27;</span>, context, value)</span><br><span class="line">            <span class="keyword">if</span> (context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>) &#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>, value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">jiaWait</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;actions里面的jiaWait被调用了&#x27;</span>, context, value)</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>, value)</span><br><span class="line">            &#125;, <span class="number">500</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">JIA</span>(<span class="params">state, value</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutations里面的JIA被调用了&#x27;</span>, state, value)</span><br><span class="line">            state.<span class="property">sum</span> += value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">JIAN</span>(<span class="params">state, value</span>) &#123;<span class="comment">//这里的value就是要加的数字</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutations里面的JIAN被调用了&#x27;</span>, state, value)</span><br><span class="line">            state.<span class="property">sum</span> -= value</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">sum</span>: <span class="number">0</span>, <span class="comment">//当前的和</span></span><br><span class="line">        <span class="attr">school</span>: <span class="string">&#x27;bilibili&#x27;</span>,</span><br><span class="line">        <span class="attr">subject</span>: <span class="string">&#x27;前端&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="title function_">bigSum</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//人员管理相关配置</span></span><br><span class="line"><span class="keyword">const</span> personOptions = &#123;</span><br><span class="line">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="comment">//添加一个姓王的人</span></span><br><span class="line">        <span class="title function_">addPersonWang</span>(<span class="params">context, value</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;王&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD_PERSON&#x27;</span>, value)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;输入的人不姓王！&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//找服务器要一个东西</span></span><br><span class="line">        <span class="title function_">addPersonServe</span>(<span class="params">context</span>) &#123;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="string">&#x27;https://api.uixsj.cn/hitokoto/get?type=social&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">                <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                    context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD_PERSON&#x27;</span>, &#123; <span class="attr">id</span>: <span class="title function_">nanoid</span>(), <span class="attr">name</span>: response.<span class="property">data</span> &#125;)</span><br><span class="line">                &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(error.<span class="property">message</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">ADD_PERSON</span>(<span class="params">state, value</span>) &#123;<span class="comment">//这里的value就是输入的人名的那个对象</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutations里面的JIAN被调用了&#x27;</span>, state, value)</span><br><span class="line">            state.<span class="property">personList</span>.<span class="title function_">unshift</span>(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>: &#123;</span><br><span class="line">        <span class="attr">personList</span>: [&#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;静香&#x27;</span></span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;</span><br><span class="line">        <span class="comment">//这里的state是 当前Person组件的state</span></span><br><span class="line">        <span class="title function_">firstPersonName</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">personList</span>[<span class="number">0</span>].<span class="property">name</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建并暴露7store 用来管理以上三个</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        <span class="attr">countAbout</span>: countOptions,</span><br><span class="line">        <span class="attr">personAbout</span>: personOptions</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3、开启命名空间后，组件中读取state数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">personList</span>;</span><br><span class="line"><span class="comment">// 方式二：借助mapState读取</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&quot;countAbout&quot;</span>, [<span class="string">&quot;sum&quot;</span>, <span class="string">&quot;school&quot;</span>, <span class="string">&quot;subject&quot;</span>], <span class="string">&quot;personAbout&quot;</span>, [</span><br><span class="line">      <span class="string">&quot;personList&quot;</span>,</span><br><span class="line">    ]),</span><br></pre></td></tr></table></figure><p>4、开启命名空间后，组件中读取getters数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&quot;personAbout/firstPersonName&quot;</span>];</span><br><span class="line"><span class="comment">// 方式二：借助mapGetters读取</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&quot;countAbout&quot;</span>, [<span class="string">&quot;bigSum&quot;</span>]),</span><br></pre></td></tr></table></figure><p>5、开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一：自己直接读取</span></span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;personAbout/addPersonWang&quot;</span>, personObj);</span><br><span class="line"><span class="comment">// 方式二：借助mapActions读取</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(<span class="string">&quot;countAbout&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">incrementOdd</span>: <span class="string">&quot;jiaOdd&quot;</span>,</span><br><span class="line">      <span class="attr">incrementWait</span>: <span class="string">&quot;jiaWait&quot;</span>,</span><br><span class="line">    &#125;),</span><br></pre></td></tr></table></figure><p>6、开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;personAbout/ADD_PERSON&quot;</span>, personObj);</span><br><span class="line"><span class="comment">// 方式二：借助mapMutations读取</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(<span class="string">&quot;countAbout&quot;</span>, &#123; <span class="attr">increment</span>: <span class="string">&quot;JIA&quot;</span>, <span class="attr">decrement</span>: <span class="string">&quot;JIAN&quot;</span> &#125;),</span><br></pre></td></tr></table></figure><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>1、理解：一个路由（route），就是一组映射关系（key-value）,多个路由需要路由器（router）进行管理。<br>2、前端路由：key是路径，value是组件</p><h5 id="1、基本使用"><a href="#1、基本使用" class="headerlink" title="1、基本使用"></a>1、基本使用</h5><p>1、安装vue-router</p><pre><code>  npm i vue-router@3  用于vue2   npm i vue-router@4  用于vue3</code></pre><p>2、应用插件</p><pre><code> Vue.use(VueRouter)</code></pre><p>3、编写router配置项（新建router文件夹 index.js文件）  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个配置器（里面写的就是各种路由）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">        &#125;]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4、实现切换（active-class可配置高亮样式）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link <span class="keyword">class</span>=<span class="string">&quot;list-group-item&quot;</span> active-<span class="keyword">class</span>=<span class="string">&quot;active&quot;</span> to=<span class="string">&quot;/about&quot;</span></span><br><span class="line">        &gt;<span class="title class_">About</span>&lt;/router-link</span><br></pre></td></tr></table></figure><p>5、指定展示位置</p><pre><code>&lt;router-view&gt;&lt;/router-view&gt;</code></pre><h5 id="2、几个注意点"><a href="#2、几个注意点" class="headerlink" title="2、几个注意点"></a>2、几个注意点</h5><p>1、路由组件通常存放在pages文件夹中，一般组件通常存放在components文件夹。<br>2、通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。<br>3、每个组件都有自己的$route属性，里面存储着自己的路由信息。<br>4、整个应用只有一个router，可以通过组件的$router属性获取到。</p><h5 id="3、路由嵌套（多级路由）"><a href="#3、路由嵌套（多级路由）" class="headerlink" title="3、路由嵌套（多级路由）"></a>3、路由嵌套（多级路由）</h5><p>1、配置路由规则，使用children配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>: [&#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">News</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">Message</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2、跳转（要写完整的路径）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link <span class="keyword">class</span>=<span class="string">&quot;list-group-item&quot;</span> active-<span class="keyword">class</span>=<span class="string">&quot;active&quot;</span> to=<span class="string">&quot;/home/news&quot;</span>&gt;<span class="title class_">News</span>&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h5 id="4、路由的query参数"><a href="#4、路由的query参数" class="headerlink" title="4、路由的query参数"></a>4、路由的query参数</h5><p>1、传递参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跳转路由并携带query参数， to的字符串写法 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;router-link :to=&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;</span></span><br><span class="line"><span class="comment">          &gt;message001&lt;/router-link</span></span><br><span class="line"><span class="comment">        &gt;&amp;nbsp;&amp;nbsp; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 跳转路由并携带query参数， to的对象写法 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">            path: &#x27;/home/message/detail&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">            query: &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">              id: 666,</span></span></span><br><span class="line"><span class="string"><span class="tag">              title: 哈哈哈,</span></span></span><br><span class="line"><span class="string"><span class="tag">            &#125;,</span></span></span><br><span class="line"><span class="string"><span class="tag">          &#125;&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span>跳转&lt;/router-link</span><br><span class="line">        &gt;</span><br></pre></td></tr></table></figure><p> 2、接收参数</p><pre><code>  $route.query.id   $route.query.title</code></pre><h5 id="5、命名路由"><a href="#5、命名路由" class="headerlink" title="5、命名路由"></a>5、命名路由</h5><p>1、作用：可以简化路由的跳转<br>2、如何使用<br>（1）、给路由命名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;guanyu&#x27;</span>,<span class="comment">//给路由命名</span></span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>: [&#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">News</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;xiaoxi&#x27;</span>,</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">                <span class="attr">children</span>: [&#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">Detail</span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>（2）、简化跳转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 简化后，通过路由的名字进行跳转 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;guanyu&#x27; &#125;&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span>About&lt;/router-link</span><br><span class="line">          &gt;</span><br><span class="line">          <span class="comment">&lt;!-- 简化前需要写完整的路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">class</span>=<span class="string">&quot;list-group-item&quot;</span> <span class="attr">active-class</span>=<span class="string">&quot;active&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span>Home&lt;/router-link</span><br><span class="line">          &gt;</span><br><span class="line">```    </span><br><span class="line">##### 6、路由的params参数</span><br><span class="line">1、配置路由，声明接受params参数    </span><br><span class="line">```js</span><br><span class="line">//创建并暴露一个路由器</span><br><span class="line">export default new VueRouter(&#123;</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: &#x27;guanyu&#x27;,//给路由命名</span><br><span class="line">            path: &#x27;/about&#x27;,</span><br><span class="line">            component: About</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: &#x27;/home&#x27;,</span><br><span class="line">            component: Home,</span><br><span class="line">            children: [&#123;</span><br><span class="line">                path: &#x27;news&#x27;,</span><br><span class="line">                component: News</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                name: &#x27;xiaoxi&#x27;,</span><br><span class="line">                path: &#x27;message&#x27;,</span><br><span class="line">                component: Message,</span><br><span class="line">                children: [&#123;</span><br><span class="line">                    name: &#x27;xiangqing&#x27;,</span><br><span class="line">                    path: &#x27;detail/:id/:title&#x27;,//使用占位符声明接受params参数</span><br><span class="line">                    component: Detail</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2、传递参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跳转路由并携带params参数， to的字符串写法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;</span>&gt;</span>&#123;&#123;</span><br><span class="line">          m.title</span><br><span class="line">        &#125;&#125;&lt;/router-link</span><br><span class="line">        &gt;<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line"><span class="comment">&lt;!-- 跳转路由并携带params参数， to的对象写法,这种写法只能使用命名路由 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">            name: &#x27;xiangqing&#x27;,</span></span></span><br><span class="line"><span class="string"><span class="tag">            params: &#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">              id: m.id,</span></span></span><br><span class="line"><span class="string"><span class="tag">              title: m.title,</span></span></span><br><span class="line"><span class="string"><span class="tag">            &#125;,</span></span></span><br><span class="line"><span class="string"><span class="tag">          &#125;&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span>&#123;&#123; m.title &#125;&#125;&lt;/router-link</span><br><span class="line">        &gt;<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br></pre></td></tr></table></figure><pre><code>特别注意：路由携带params参数时，若使用to对象写法，则不能使用path配置项，必须使用name配置</code></pre><p>3、接受参数</p><pre><code>$route.params.id $route.params.title</code></pre><h5 id="7、路由的props配置"><a href="#7、路由的props配置" class="headerlink" title="7、路由的props配置"></a>7、路由的props配置</h5><p>作用：让路由组件更方便接收到参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;guanyu&#x27;</span>,<span class="comment">//给路由命名</span></span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>: [&#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">News</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;xiaoxi&#x27;</span>,</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">                <span class="attr">children</span>: [&#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,<span class="comment">//使用占位符声明接受params参数</span></span><br><span class="line">                    <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">                    <span class="comment">//第一种写法，props的值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line">                    <span class="comment">// props: &#123; id: &#x27;666&#x27;, title: &#x27;hello&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//第二种写法，props的值为布尔值true，则会把路由收到的所有parmas参数通过props传给Detail组件</span></span><br><span class="line">                    <span class="comment">// props: true,</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//第三种写法，props的值为函数，该函数返回的对象中的每一组key-value都会通过props传给Detail组件</span></span><br><span class="line">                    <span class="title function_">props</span>(<span class="params">$route</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> &#123;</span><br><span class="line">                            <span class="attr">id</span>: $route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line">                            <span class="attr">title</span>: $route.<span class="property">query</span>.<span class="property">title</span>,</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="8、router-link标签的replace属性"><a href="#8、router-link标签的replace属性" class="headerlink" title="8、router-link标签的replace属性"></a>8、router-link标签的replace属性</h5><p>1、作用：控制路由跳转时操作浏览器历史记录模式<br>2、浏览器的历史纪录有两种写入方式，分别为：push和replace,push是追加历史记录，replace是替换当前记录，路由跳转的时候默认为true.<br>3、如何开启replace模式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">replace</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">```      </span><br><span class="line">##### 9、编程式路由导航</span><br><span class="line">1、作用：不借助router-link标签实现路由跳转，可让路由跳转更加灵活</span><br><span class="line">2、具体编码</span><br><span class="line">```js</span><br><span class="line">// $router的两个API</span><br><span class="line"> this.$router.push(&#123;</span><br><span class="line">        name: &quot;xiangqing&quot;,</span><br><span class="line">        query: &#123;</span><br><span class="line">          id: m.id,</span><br><span class="line">          title: m.title,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">   this.$router.replace(&#123;</span><br><span class="line">        name: &quot;xiangqing&quot;,</span><br><span class="line">        query: &#123;</span><br><span class="line">          id: m.id,</span><br><span class="line">          title: m.title,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line"> this.$router.back();   //后退</span><br><span class="line"> this.$router.forward(); //前进</span><br><span class="line">this.$router.go(2); //里面的参数正数表示前进，负数表示后退     </span><br></pre></td></tr></table></figure><h5 id="10、缓存路由组件"><a href="#10、缓存路由组件" class="headerlink" title="10、缓存路由组件"></a>10、缓存路由组件</h5><p>1、作用：让不展示的路由组件保持挂载，不被销毁<br>2、具体编码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 保持组件活跃，跳转路由后，不被销毁   include里面写的是不被销毁的组件--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;News&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">ke-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="11、两个新的生命周期钩子"><a href="#11、两个新的生命周期钩子" class="headerlink" title="11、两个新的生命周期钩子"></a>11、两个新的生命周期钩子</h5><p>1、作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态<br>2、具体名字:</p><pre><code>（1）、activated路由组件被激活时触发（2）、deactivated路由组件失活时触发</code></pre><h5 id="12、路由守卫"><a href="#12、路由守卫" class="headerlink" title="12、路由守卫"></a>12、路由守卫</h5><p>1、作用：对路由进行权限控制<br>2、分类：全局守卫、独享守卫、组件内守卫<br>3、全局守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置路由守卫——初始化的时候被调用，每次路由切换路由之前被调用</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;前置路由守卫&#x27;</span>, to, <span class="keyword">from</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">isAuth</span>) &#123;<span class="comment">//判断当前路由是否需要鉴定权限</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;bilibili&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">next</span>()<span class="comment">//放行</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;学校名不对，无权限查看&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>()<span class="comment">//放行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//全局后置路由守卫——初始化的时候被调用，每次切换路由之后被调用（无next()）</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;后置路由守卫&#x27;</span>, to, <span class="keyword">from</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> || <span class="string">&#x27;lalal&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4、独享路由守卫（就是某一个路由的）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;<span class="comment">//独享路由守卫 （只有前置，没有后置）</span></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;前置路由守卫&#x27;</span>, to, <span class="keyword">from</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">isAuth</span>) &#123;<span class="comment">//判断是否需要鉴定权限</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;bilibili&#x27;</span>) &#123;</span><br><span class="line">                            <span class="title function_">next</span>()</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="title function_">alert</span>(<span class="string">&#x27;学校名不对，无权限查看&#x27;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="title function_">next</span>()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>5、组件内守卫</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过路由规则进入该组件时被调用</span></span><br><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;组件内路由守卫&quot;</span>, to, <span class="keyword">from</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (to.<span class="property">meta</span>.<span class="property">isAuth</span>) &#123;</span><br><span class="line">    <span class="comment">//判断是否需要鉴定权限</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;school&quot;</span>) === <span class="string">&quot;bilibili&quot;</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&quot;学校名不对，无权限查看&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//通过路由规则离开该组件时被调用</span></span><br><span class="line"><span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;组件内路由守卫&quot;</span>, to, <span class="keyword">from</span>);</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="13、路由器的两种工作模式"><a href="#13、路由器的两种工作模式" class="headerlink" title="13、路由器的两种工作模式"></a>13、路由器的两种工作模式</h5><p>  1、对于一个url来说，什么是hash值？ ——#及其后面的内容就是hash值。<br>  2、hash值不会包含在HTTP请求中，即：hash值不会带给服务器<br>  3、hash模式</p><pre><code> 1、地址中永远带着#号，不美观。 2、若以后将地址通过第三方手机app分享，若app校验严格，则地址会标记为不合格。 3、兼容性较好</code></pre><p>  4、history模式</p><pre><code> 1、地址干净、美观。 2、兼容性和hash模式相比较差。 3、应用部署上线需要后端人员支持，解决刷新页面服务器中404的问题。                    </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>node.js</title>
      <link href="/2022/12/02/nodejs/"/>
      <url>/2022/12/02/nodejs/</url>
      
        <content type="html"><![CDATA[<h2 id="jing的哈哈哈"><a href="#jing的哈哈哈" class="headerlink" title="jing的哈哈哈"></a>jing的哈哈哈</h2><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><blockquote><h2 id="ref属性"><a href="#ref属性" class="headerlink" title="ref属性"></a>ref属性</h2><p>1、被用来给元素或子组件注册引用信息<br>2、应用在html标签上获取的是真实的DOM元素，应用在子组件标签上获取的是组件实例对象 vc<br>3、使用方式</p><blockquote><ul><li>打标识:<br> <code>&lt;h1 v-text=&quot;msg&quot; ref=&quot;title&quot;&gt;xxx&lt;/h1&gt;</code><br>   <code>&lt;School ref=&quot;sch&quot; /&gt;</code></li><li>获取：<blockquote><ul><li>console.log(this.$refs.title);  真实的DOM元素 </li><li>console.log(this.$refs.sch);  School组件的实例对象 vc</li></ul></blockquote></li></ul></blockquote></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jing的第一篇文章</title>
      <link href="/2022/11/30/22-11-30-jing%E7%9A%84%E7%AC%AC%E4%B8%80%E7%89%87%E6%96%87%E7%AB%A0/"/>
      <url>/2022/11/30/22-11-30-jing%E7%9A%84%E7%AC%AC%E4%B8%80%E7%89%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="jing的哈哈哈"><a href="#jing的哈哈哈" class="headerlink" title="jing的哈哈哈"></a>jing的哈哈哈</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
